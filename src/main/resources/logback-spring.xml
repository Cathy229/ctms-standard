<?xml version="1.0" encoding="UTF-8"?>
<!--日志级别以及优先级排序: OFF > FATAL > ERROR > WARN > INFO > DEBUG > TRACE > ALL -->
<!-- 日志输出规则 根据当前ROOT 级别，日志输出时，级别高于root默认的级别时 会输出 -->
<!-- 以下 每个配置的 filter 是过滤掉输出文件里面，会出现高级别文件，依然出现低级别的日志信息，通过filter 过滤只记录本级别的日志 -->
<!-- scan 当此属性设置为true时，配置文件如果发生改变，将会被重新加载，默认值为true。 -->
<!-- scanPeriod 设置监测配置文件是否有修改的时间间隔，如果没有给出时间单位，默认单位是毫秒。当scan为true时，此属性生效。默认的时间间隔为1分钟。 -->
<!-- debug 当此属性设置为true时，将打印出logback内部日志信息，实时查看logback运行状态。默认值为false。 -->
<configuration scan="true" scanPeriod="60 seconds" debug="false">
  
  <!-- ConsoleAppender 控制台输出日志 -->
  <appender name="console" class="ch.qos.logback.core.ConsoleAppender">
      <encoder>
          <pattern>
              <!-- 设置日志输出格式 -->
              %d{yyyy-MM-dd HH:mm:ss.SSS} [%-5level] [%thread] %logger - %msg%n
          </pattern>
          <charset>utf-8</charset>
      </encoder>
  </appender>
  
  <!-- 引入application.properties文件 -->
  <property resource="application.properties" />
  <!-- 路径 -->
  <substitutionProperty name="LOG_HOME" value="${server.tomcat.basedir}" />
  <!-- 配置获取ip类 -->
  <conversionRule conversionWord="ip" converterClass="com.sinotrans.oms.common.tool.LogIpConfig" />
  <!-- 文件大小 -->
  <property name="log.maxSize" value="100MB" />

  <contextName>${LOG_HOME}</contextName>  
	
  <!-- ERROR级别日志 -->
  <!-- 滚动记录文件，先将日志记录到指定文件，当符合某个条件时，将日志记录到其他文件 RollingFileAppender -->
  <appender name="ERROR" class="ch.qos.logback.core.rolling.RollingFileAppender">
  	  <Prudent>true</Prudent>
      <!-- 过滤器，只记录WARN级别的日志 -->
      <!-- 果日志级别等于配置级别，过滤器会根据onMath 和 onMismatch接收或拒绝日志。 -->
      <filter class="ch.qos.logback.classic.filter.LevelFilter">
          设置过滤级别
          <level>ERROR</level>
          用于配置符合过滤条件的操作
          <onMatch>ACCEPT</onMatch>
          用于配置不符合过滤条件的操作
          <onMismatch>DENY</onMismatch>
      </filter>
      <!-- 最常用的滚动策略，它根据时间来制定滚动策略.既负责滚动也负责触发滚动 -->
      <rollingPolicy class="ch.qos.logback.core.rolling.SizeAndTimeBasedRollingPolicy">
          <!--日志输出位置 可相对、和绝对路径 -->
          <fileNamePattern>
              ${LOG_HOME}/error/%d{yyyy-MM-dd}/%d{yyyy-MM-dd}-error-%i.log
          </fileNamePattern>
          <!-- 可选节点，控制保留的归档文件的最大数量，超出数量就删除旧文件,假设设置每个月滚动，且<maxHistory>是6，
          则只保存最近6个月的文件，删除之前的旧文件。注意，删除旧文件是，那些为了归档而创建的目录也会被删除 -->
          <!-- <maxHistory>${log.maxHistory}</maxHistory> -->
          <!--日志文件最大的大小-->
          <MaxFileSize>${log.maxSize}</MaxFileSize>
      </rollingPolicy>
      <encoder>
          <pattern>
              <!-- 设置日志输出格式 -->
              %d{yyyy-MM-dd HH:mm:ss.SSS} [host:%ip] [%thread] %-5level %logger{50} - %msg%n
          </pattern>
      	  <charset>utf-8</charset>
      </encoder>
  </appender>

  <!-- DEBUG级别日志 appender -->
  <appender name="DEBUG" class="ch.qos.logback.core.rolling.RollingFileAppender">
  	  <Prudent>true</Prudent>
      <filter class="ch.qos.logback.classic.filter.LevelFilter">
          <level>DEBUG</level>
          <onMatch>ACCEPT</onMatch>
          <onMismatch>DENY</onMismatch>
      </filter>
      <rollingPolicy class="ch.qos.logback.core.rolling.SizeAndTimeBasedRollingPolicy">
          <fileNamePattern>${LOG_HOME}/debug/%d{yyyy-MM-dd}/%d{yyyy-MM-dd}-debug-%i.log</fileNamePattern>
          <!-- <maxHistory>${log.maxHistory}</maxHistory> -->
          <MaxFileSize>${log.maxSize}</MaxFileSize>
      </rollingPolicy>
      <encoder>
          <pattern>%d{yyyy-MM-dd HH:mm:ss.SSS} [host:%ip] [%-5level] %logger - %msg%n</pattern>
      	  <charset>utf-8</charset>
      </encoder>
  </appender>


  <!-- WARN级别日志 appender -->
  <!-- <appender name="WARN" class="ch.qos.logback.core.rolling.RollingFileAppender">
      <append>true</append>
      <filter class="ch.qos.logback.classic.filter.LevelFilter">
          <level>WARN</level>
          <onMatch>ACCEPT</onMatch>
          <onMismatch>DENY</onMismatch>
      </filter>
      <rollingPolicy class="ch.qos.logback.core.rolling.SizeAndTimeBasedRollingPolicy">
          <fileNamePattern>${LOG_HOME}/warn/%d{yyyy-MM-dd}/%d{yyyy-MM-dd}-warn-%i.log</fileNamePattern>
          <maxHistory>${log.maxHistory}</maxHistory>
          <MaxFileSize>${log.maxSize}</MaxFileSize>
      </rollingPolicy>
      <encoder>
          <pattern>%d{yyyy-MM-dd HH:mm:ss.SSS}  [host:%ip] [%-5level] %logger - %msg%n</pattern>
      	  <charset>utf-8</charset>
      </encoder>
  </appender> -->


  <!-- root级别   DEBUG -->
  <root>
      <!-- 打印debug级别日志及以上级别日志 -->
      <level value="DEBUG"/>
      <!-- 控制台输出 -->
      <appender-ref ref="console"/>
      <!-- 文件输出 -->
      <appender-ref ref="ERROR"/>
      <appender-ref ref="DEBUG"/>
      <!-- <appender-ref ref="WARN"/> -->
  </root>
  
  <!--过滤掉spring和mybatis的一些无用的DEBUG信息-->
  <logger name="org.springframework" level="INFO"/>
  <logger name="org.mybatis" level="DEBUG" />
  <logger name="com.sinotrans" level="DEBUG" />
  
  <logger name="com.sinotrans" level="DEBUG" additivity="false">
      <appender-ref ref="console"/>
  </logger>
    <logger name="org.springframework" level="INFO" additivity="false">
      <appender-ref ref="console"/>
  </logger>
</configuration>